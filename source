/* run this program using the console pauser or add your own getch, system("pause") or input loop */

// Shephard_CLI.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream> // std::cout, std::cin
//#include <cstdio>	//
#include <fstream>	//std::ofstream, std::ifstream
#include <string>	// strings
using namespace std;

//global scope variables
const int pastureSizeX = 17; // number of columns
const int pastureSizeY = 17;  // number of rows
const int shephardPositionY = 0; //x position of shephard
const int shephardPositionX = 0; // y position of shephard
char pasture[pastureSizeX][pastureSizeY];
char shephardCharacter = '#'; // represents the shephard
char trapCharacter = 'T';
int trapPositionX =1;
int trapPositionY =1;
/* TODO (#2#): create a class called trap that asks for user 
               input. The input will correlate to a position in 
               createPastureClass */
// this class will
class sheepTrapClass{
	
	public:
int createTrapFunction(){
	cout << "Enter X axis for next Trap:   ";
	cin >> trapPositionX ;
	cout  << "Enter Y axis for next Trap:   ";
	cin >> trapPositionY;
	cout << endl;
	//This is for ease of readability
	cout<< "-------------------------------------------------------" << endl;

	}
};

//this class places all the sheeps in a location on the array
struct sheepPositionClass: public sheepTrapClass{
	//variables for the sheep positions in the array
	int sheep1PositionY = 8; //x position of sheep 1
	int sheep1PositionX = 2; //y position of sheep 2
	char sheep1Character = '$'; //represents the sheeps
	
	//currently this does nothing, but it doesn't break it either
	sheep1MovementFuction(){
		sheep1PositionY - 4;
		sheep1PositionX - 1;
	}
	
	int sheep2PositionY = 11;
    int sheep2PositionX = 15;
    char sheep2Character = '$';
    
    int sheep3PositionY = 13;
    int sheep3PositionX = 13;
    char sheep3Character = '$';
    
    int sheep4PositionY = 7;
    int sheep4PositionX = 15;
    char sheep4Character = '$';
    
    int sheep5PositionY = 4;
    int sheep5PositionX = 14;
    char sheep5Character = '$';
    
	//places the position of he sheeps with the $ character
	int sheepPositionFunction(){
		
		pasture[sheep1PositionX][sheep1PositionY] = sheep1Character;
		pasture[sheep2PositionX][sheep2PositionY] = sheep2Character;
        pasture[sheep3PositionX][sheep3PositionY] = sheep3Character;
        pasture[sheep4PositionX][sheep4PositionY] = sheep4Character;
        pasture[sheep5PositionX][sheep5PositionY] = sheep5Character;
	}
};

// create and print a two dimensional array
class createPastureClass: public sheepPositionClass{
	
	public :
	
	int createPastureFunction()
	{
	//cout << "createPasturefunction" << endl;
	for(int x = 0; x < pastureSizeX; x++){
		
		for (int y = 0; y < pastureSizeY; y++) {
			
			pasture[x][y] = '_';
		}
			}
			// these display the sheep position class and stores values to the sheep in the array
			pasture[shephardPositionX][shephardPositionY] = shephardCharacter;	// Displays # at  0, 0
			pasture[trapPositionX][trapPositionY] = trapCharacter;	//Displays T at 5, 5
			//this calls the sheep position class and stores values to the sheep in the array
			sheepPositionClass sheepsSpot;
			sheepsSpot.sheepPositionFunction();
			
			sheepPositionClass sheepsSpot2;
			sheepsSpot2.sheepPositionFunction();
			
			sheepPositionClass sheepsSpot3;
			sheepsSpot3.sheepPositionFunction();
			
			sheepPositionClass sheepsSpot4;
			sheepsSpot4.sheepPositionFunction();
			
			sheepPositionClass sheepsSpot5;
			sheepsSpot5.sheepPositionFunction();
						
	}
	//this prints out the aray row by row and gives it the proper spacing and seperation with pipes
	int printPastureFunction(){
		
		for(int x = 0; x < pastureSizeY; x++){
			
			for (int y = 0; y < pastureSizeX; y++) {
				
				cout << "|"<< pasture[x][y] << "|";
			}
				cout << " " << endl;
		}
	//this function must be called here so that the arr    ay prints at least once before asking for user input for traps
	sheepTrapClass trap;
	trap.createTrapFunction();
	}
	};
			
struct playerNameClass{	

	int playerNameFunction(){
	
string name;

		cout << "What is your name? \n";
		
		ofstream fout;
		ifstream fin;
		//opens the file
		fin.open("Name&Score.csv");
		cin>> name;
		//ios::app appends to the csv file
		fout.open("Name&Score.csv",ios::app);
		if(fin.is_open())
			fout<< name;
		fin.close();
		fout.close();	
	}
		//myfile.close();
};

//this class currently does nothing but display 3 and 5 with text
class scoreClass{
		
 	public:
 	
 	int lives =3;
 	int sheepRemaining = 5;
 	
 	int printScoreFunction(){
 	std::cout << "Lives Remaining:" <<lives<< endl;
	std::cout << "Sheep Remaining:"<< sheepRemaining<<endl;
		}; 	
	};
	
	
int main()
{
//	void open(const char *filename, ios::openmode mode);
	//intro story printout with instructions
	cout << "**********************************************************************" << endl;
	cout << "** The rules of the game are simple: Don't let the sheep get to you **" << endl;
	cout << "**      Every turn you will guess where the sheep will be next      **" << endl;
	cout << "**Enter in where you want the trap to be: 0 - 17 on the X and Y axis**" << endl;
	cout << "** You have 3 lives and there are 5 sheep              GOOD LUCK!   **" << endl;
	cout << "**********************************************************************" << endl;
	int turnsRemaining = 3;  //used in the while loop down below
	
		/* TODO (#3#): Write user scores to a file
 */
	playerNameClass name;
	name.playerNameFunction();
	
	/* TODO (#4#): if variable trap equals sheep position subtract 
               one from counter */
	/* TODO (#1#): create a counter of 5--. If counter = 0 then 
	               display message that game is over */	
	//calls struct createPasture and it should print out a two-dimensional array
	while (turnsRemaining > 0) { //while turnsRemaining is less than 2
	
	createPastureClass matrix;
	matrix.createPastureFunction();
	matrix.printPastureFunction();
	
	//calling an instance of score class	
	scoreClass score;
	score.printScoreFunction();
	cout <<endl;
	
	cout << "There are " << turnsRemaining << " turns remaining!" <<endl;
		turnsRemaining--;
}
	return 0;

}

